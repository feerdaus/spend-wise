// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id                String            @id @default(auto()) @map("_id") @db.ObjectId
  name              String?
  email             String?           @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  expenses          Expense[]
  expenseCategories ExpenseCategory[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model ExpenseCategory {
  id              String    @id @default(uuid()) @map("_id")
  name            String
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @db.ObjectId
  allocatedAmount Float
  expenses        Expense[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Expense {
  id          String          @id @default(uuid()) @map("_id")
  description String
  amount      Float
  date        DateTime
  category    ExpenseCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  user        User            @relation(fields: [userId], references: [id])
  userId      String          @db.ObjectId
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}
